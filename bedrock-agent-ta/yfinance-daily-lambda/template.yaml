AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  yfinance-daily-lambda

  Sample SAM Template for yfinance-daily-lambda

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Parameters:
  S3-BUCKET-NAME:
    Type: String
    Description: A parameter to be used as an environment variable

Globals:
  Function:
    Timeout: 900
    MemorySize: 512

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
Resources:

  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
              - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
      Policies: 
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow 
                Action: 
                  - "s3:*"
                Resource: 
                  - "arn:aws:s3:::bharsrid-bedrock-agent-yf-demo" 
                  - "arn:aws:s3:::bharsrid-bedrock-agent-yf-demo/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: yfinance-daily-lambda-code/
      Handler: app.lambda_handler
      Runtime: python3.10
      Layers:
        - arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:1
      Environment:
        Variables:
          LAMBDA_INSIGHTS_LOG_LEVEL: info
          S3_BUCKET : !Ref S3_BUCKET
      Architectures:
      - x86_64
      Role: !GetAtt IamRoleLambdaExecution.Arn

    # Add the CloudWatch trigger
  HelloWorldFunctionScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'cron(0 0 * * ? *)'
      Targets:
        - Arn: !GetAtt HelloWorldFunction.Arn
          Id: HelloWorldFunctionTarget
    # Grant the necessary permissions to the Lambda function
  HelloWorldFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HelloWorldFunction
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt HelloWorldFunctionScheduleRule.Arn


  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api

  HelloWorldFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt IamRoleLambdaExecution.Arn
